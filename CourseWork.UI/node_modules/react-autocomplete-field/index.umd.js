(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
  typeof define === 'function' && define.amd ? define(['react'], factory) :
  (global.react-autocomplete-field = factory(global.React));
}(this, (function (React) { 'use strict';

var React__default = 'default' in React ? React['default'] : React;

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};



var set = function set(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};

var Select = function (_Component) {
    inherits(Select, _Component);

    function Select() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, Select);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Select.__proto__ || Object.getPrototypeOf(Select)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            items: [],
            value: _this.props.value,
            selectedIndex: -1,
            isAutocompleteOpen: false
        }, _this.search = function (text) {
            return new Promise(function (resolve) {
                return resolve([text]);
            });
        }, _this.getSuggestionText = function (item) {
            return item;
        }, _this.getSuggestionValue = function (item) {
            return item;
        }, _this._showAC = function () {
            return _this.setState({ isAutocompleteOpen: true });
        }, _this._hideAC = function () {
            return _this.setState({ isAutocompleteOpen: false });
        }, _this._select = function (item) {
            _this.setState({ value: _this.getSuggestionText(item), isAutocompleteOpen: false });
            _this.props.onSelect(_this.getSuggestionValue(item));
        }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Select, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                _onFocus = _props.onFocus,
                _onBlur = _props.onBlur,
                _onChange = _props.onChange,
                _onKeyDown = _props.onKeyDown,
                _onMouseDown = _props.onMouseDown,
                onError = _props.onError,
                onSelect = _props.onSelect,
                rest = objectWithoutProperties(_props, ['onFocus', 'onBlur', 'onChange', 'onKeyDown', 'onMouseDown', 'onError', 'onSelect']);
            var _state = this.state,
                items = _state.items,
                value = _state.value,
                selectedIndex = _state.selectedIndex,
                isAutocompleteOpen = _state.isAutocompleteOpen;

            return React__default.createElement(
                'div',
                null,
                this.renderInput(_extends({}, rest, {
                    value: value,
                    onFocus: function onFocus(e) {
                        _this2.search(e.target.value).then(function (items) {
                            return _this2.setState({ items: items });
                        }).catch(onError);
                        _this2._showAC();
                        _onFocus(e);
                    },
                    onBlur: function onBlur(e) {
                        _this2._hideAC();
                        _onBlur(e);
                    },
                    onChange: function onChange(e) {
                        _this2.setState({ value: e.target.value, items: [] });
                        _this2.search(e.target.value).then(function (items) {
                            return _this2.setState({ items: items });
                        }).catch(onError);
                        _onChange(e);
                    },
                    onKeyDown: function onKeyDown(e) {
                        var currentItem = void 0;
                        if (!isAutocompleteOpen) {
                            _this2._showAC();
                        }

                        // Arrow down
                        if (e.which === 40) {
                            if (selectedIndex < items.length - 1) {
                                e.preventDefault();
                                _this2.setState({ selectedIndex: selectedIndex + 1 });
                            }
                        }

                        // Arrow up
                        if (e.which === 38) {
                            if (selectedIndex > 0) {
                                e.preventDefault();
                                _this2.setState({ selectedIndex: selectedIndex - 1 });
                            }
                            if (selectedIndex < 0) {
                                e.preventDefault();
                                _this2.setState({ selectedIndex: items.length - 1 });
                            }
                        }

                        // Enter
                        if (e.which === 13) {
                            if (selectedIndex >= 0 || selectedIndex < items.length) {
                                currentItem = items[selectedIndex];
                                _this2._select(currentItem);
                            }
                        }

                        // Escape
                        if (e.which === 27) {
                            _this2._hideAC();
                        }

                        _onKeyDown(e);
                    },
                    onMouseDown: function onMouseDown(e) {
                        if (!isAutocompleteOpen) {
                            _this2._showAC();
                        }
                        _onMouseDown(e);
                    }
                })),
                isAutocompleteOpen ? this.renderAutocomplete({
                    items: items,
                    selectedIndex: selectedIndex,
                    renderItem: this.renderAutocompleteItem,
                    value: value,
                    getItemText: this.getSuggestionText,
                    onSelect: this._select
                }) : null
            );
        }
    }]);
    return Select;
}(React.Component);

Select.defaultProps = {
    value: '',
    onSelect: function onSelect() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    onChange: function onChange() {},
    onKeyDown: function onKeyDown() {},
    onMouseDown: function onMouseDown() {},
    onError: function onError() {}
};

var TextInput = (function () {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return React__default.createElement('input', _extends({
        type: 'text'
    }, props, {
        autoComplete: 'off'
    }));
});

var map = (function (arr, fn) {
    var out = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    for (var i = 0; i < arr.length; i++) {
        out[i] = fn(arr[i], i, arr);
    }
    return out;
});

var List = (function (_ref) {
    var _ref$items = _ref.items,
        items = _ref$items === undefined ? [] : _ref$items,
        _ref$selectedIndex = _ref.selectedIndex,
        selectedIndex = _ref$selectedIndex === undefined ? -1 : _ref$selectedIndex,
        _ref$getItemText = _ref.getItemText,
        getItemText = _ref$getItemText === undefined ? function (i) {
        return i;
    } : _ref$getItemText,
        _ref$renderItem = _ref.renderItem,
        renderItem = _ref$renderItem === undefined ? function (i) {
        return i;
    } : _ref$renderItem,
        _ref$onSelect = _ref.onSelect,
        onSelect = _ref$onSelect === undefined ? function () {} : _ref$onSelect,
        rest = objectWithoutProperties(_ref, ['items', 'selectedIndex', 'getItemText', 'renderItem', 'onSelect']);
    return items.length ? React__default.createElement(
        'div',
        _extends({}, rest, { className: 'react-dadata__suggestions' }),
        map(items, function (item, key) {
            return renderItem({
                key: key,
                onMouseDown: function onMouseDown() {
                    return onSelect(item);
                },
                selectedIndex: selectedIndex,
                value: getItemText(item)
            });
        })
    ) : null;
});

var ListItem = (function () {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _props$value = props.value,
        value = _props$value === undefined ? '' : _props$value,
        _props$key = props.key,
        key = _props$key === undefined ? null : _props$key,
        _props$selectedIndex = props.selectedIndex,
        selectedIndex = _props$selectedIndex === undefined ? -1 : _props$selectedIndex,
        rest = objectWithoutProperties(props, ['value', 'key', 'selectedIndex']);

    return React__default.createElement(
        'div',
        _extends({
            key: key
        }, rest, {
            className: '\n                    react-dadata__suggestion ' + (selectedIndex ? '' : 'react-dadata__suggestion--first') + '\n                    ' + (key !== selectedIndex ? '' : 'react-dadata__suggestion--current') + '\n                '
        }),
        value
    );
});

var index = {
    Select: Select,
    TextInput: TextInput,
    List: List,
    ListItem: ListItem
};

return index;

})));
//# sourceMappingURL=index.umd.js.map
